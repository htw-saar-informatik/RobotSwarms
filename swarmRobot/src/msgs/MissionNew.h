// Generated by gencpp from file swarmRobot/MissionNew.msg
// DO NOT EDIT!


#ifndef SWARMROBOT_MESSAGE_MISSIONNEW_H
#define SWARMROBOT_MESSAGE_MISSIONNEW_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace swarmRobot
{
template <class ContainerAllocator>
struct MissionNew_
{
  typedef MissionNew_<ContainerAllocator> Type;

  MissionNew_()
    : number_leaders(0)
    , id(0)
    , robot_index_from(0)
    , robot_index_to(0)
    , object_position_x(0.0)
    , object_position_y(0.0)
    , object_size_x(0.0)
    , object_size_y(0.0)
    , target_x(0.0)
    , target_y(0.0)  {
    }
  MissionNew_(const ContainerAllocator& _alloc)
    : number_leaders(0)
    , id(0)
    , robot_index_from(0)
    , robot_index_to(0)
    , object_position_x(0.0)
    , object_position_y(0.0)
    , object_size_x(0.0)
    , object_size_y(0.0)
    , target_x(0.0)
    , target_y(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _number_leaders_type;
  _number_leaders_type number_leaders;

   typedef uint64_t _id_type;
  _id_type id;

   typedef uint8_t _robot_index_from_type;
  _robot_index_from_type robot_index_from;

   typedef uint8_t _robot_index_to_type;
  _robot_index_to_type robot_index_to;

   typedef float _object_position_x_type;
  _object_position_x_type object_position_x;

   typedef float _object_position_y_type;
  _object_position_y_type object_position_y;

   typedef float _object_size_x_type;
  _object_size_x_type object_size_x;

   typedef float _object_size_y_type;
  _object_size_y_type object_size_y;

   typedef float _target_x_type;
  _target_x_type target_x;

   typedef float _target_y_type;
  _target_y_type target_y;





  typedef boost::shared_ptr< ::swarmRobot::MissionNew_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::swarmRobot::MissionNew_<ContainerAllocator> const> ConstPtr;

}; // struct MissionNew_

typedef ::swarmRobot::MissionNew_<std::allocator<void> > MissionNew;

typedef boost::shared_ptr< ::swarmRobot::MissionNew > MissionNewPtr;
typedef boost::shared_ptr< ::swarmRobot::MissionNew const> MissionNewConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::swarmRobot::MissionNew_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::swarmRobot::MissionNew_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace swarmRobot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/lunar/share/std_msgs/cmake/../msg'], 'swarmRobot': ['/home/smanier/catkin_ws/src/swarmRobot/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::swarmRobot::MissionNew_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swarmRobot::MissionNew_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swarmRobot::MissionNew_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swarmRobot::MissionNew_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarmRobot::MissionNew_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarmRobot::MissionNew_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::swarmRobot::MissionNew_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8fc4da6d68487d4cafd610b43ada4e76";
  }

  static const char* value(const ::swarmRobot::MissionNew_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8fc4da6d68487d4cULL;
  static const uint64_t static_value2 = 0xafd610b43ada4e76ULL;
};

template<class ContainerAllocator>
struct DataType< ::swarmRobot::MissionNew_<ContainerAllocator> >
{
  static const char* value()
  {
    return "swarmRobot/MissionNew";
  }

  static const char* value(const ::swarmRobot::MissionNew_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::swarmRobot::MissionNew_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 number_leaders\n\
uint64 id\n\
\n\
uint8 robot_index_from\n\
uint8 robot_index_to\n\
\n\
float32 object_position_x\n\
float32 object_position_y\n\
\n\
float32 object_size_x\n\
float32 object_size_y\n\
\n\
float32 target_x\n\
float32 target_y\n\
";
  }

  static const char* value(const ::swarmRobot::MissionNew_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::swarmRobot::MissionNew_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.number_leaders);
      stream.next(m.id);
      stream.next(m.robot_index_from);
      stream.next(m.robot_index_to);
      stream.next(m.object_position_x);
      stream.next(m.object_position_y);
      stream.next(m.object_size_x);
      stream.next(m.object_size_y);
      stream.next(m.target_x);
      stream.next(m.target_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MissionNew_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::swarmRobot::MissionNew_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::swarmRobot::MissionNew_<ContainerAllocator>& v)
  {
    s << indent << "number_leaders: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.number_leaders);
    s << indent << "id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.id);
    s << indent << "robot_index_from: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.robot_index_from);
    s << indent << "robot_index_to: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.robot_index_to);
    s << indent << "object_position_x: ";
    Printer<float>::stream(s, indent + "  ", v.object_position_x);
    s << indent << "object_position_y: ";
    Printer<float>::stream(s, indent + "  ", v.object_position_y);
    s << indent << "object_size_x: ";
    Printer<float>::stream(s, indent + "  ", v.object_size_x);
    s << indent << "object_size_y: ";
    Printer<float>::stream(s, indent + "  ", v.object_size_y);
    s << indent << "target_x: ";
    Printer<float>::stream(s, indent + "  ", v.target_x);
    s << indent << "target_y: ";
    Printer<float>::stream(s, indent + "  ", v.target_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SWARMROBOT_MESSAGE_MISSIONNEW_H
